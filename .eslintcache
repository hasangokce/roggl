[{"D:\\Projects\\roggl\\repo\\src\\index.js":"1","D:\\Projects\\roggl\\repo\\src\\reportWebVitals.js":"2","D:\\Projects\\roggl\\repo\\src\\Components\\App\\App.js":"3","D:\\Projects\\roggl\\repo\\src\\Components\\SideNav\\SideNav.js":"4","D:\\Projects\\roggl\\repo\\src\\Components\\MenuList\\MenuList.js":"5","D:\\Projects\\roggl\\repo\\src\\Components\\ColumnList\\ColumnList.js":"6","D:\\Projects\\roggl\\repo\\src\\Components\\Column\\Column.js":"7","D:\\Projects\\roggl\\repo\\src\\Components\\Menu\\Menu.js":"8","D:\\Projects\\roggl\\repo\\src\\Components\\TopBar\\TopBar.js":"9","D:\\Projects\\roggl\\repo\\src\\util\\Roggl.js":"10","D:\\Projects\\roggl\\repo\\src\\Components\\ColumnListNone\\ColumnListNone.js":"11","D:\\Projects\\roggl\\repo\\src\\Components\\Session\\Session.js":"12"},{"size":532,"mtime":1612812226346,"results":"13","hashOfConfig":"14"},{"size":375,"mtime":1612812226387,"results":"15","hashOfConfig":"14"},{"size":10151,"mtime":1613414439487,"results":"16","hashOfConfig":"14"},{"size":833,"mtime":1613413473114,"results":"17","hashOfConfig":"14"},{"size":1330,"mtime":1613416995872,"results":"18","hashOfConfig":"14"},{"size":641,"mtime":1613300807874,"results":"19","hashOfConfig":"14"},{"size":1522,"mtime":1613302341106,"results":"20","hashOfConfig":"14"},{"size":340,"mtime":1612994339640,"results":"21","hashOfConfig":"14"},{"size":1483,"mtime":1613406599727,"results":"22","hashOfConfig":"14"},{"size":4140,"mtime":1613406428222,"results":"23","hashOfConfig":"14"},{"size":468,"mtime":1613300509827,"results":"24","hashOfConfig":"14"},{"size":2340,"mtime":1613398786755,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1mhlbv9",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"D:\\Projects\\roggl\\repo\\src\\index.js",[],["52","53"],"D:\\Projects\\roggl\\repo\\src\\reportWebVitals.js",[],"D:\\Projects\\roggl\\repo\\src\\Components\\App\\App.js",["54","55","56"],"import React, { Children } from 'react'\r\nimport './App.css';\r\nimport SideNav from '../SideNav/SideNav'\r\nimport ColumnList from '../ColumnList/ColumnList'\r\nimport ColumnListNone from '../ColumnListNone/ColumnListNone'\r\nimport Session from '../Session/Session'\r\nimport Roggl from '../../util/Roggl';\r\n\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      active_item: { _id: '', name: '...' },\r\n      menus: [\r\n      ],\r\n      columns: [\r\n      ],\r\n      isLogin: false,\r\n      page: 'login'\r\n    }\r\n\r\n    this.addMenu = this.addMenu.bind(this)\r\n    this.handleMenuClick = this.handleMenuClick.bind(this)\r\n    this.removeMenu = this.removeMenu.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleContentChange = this.handleContentChange.bind(this);\r\n    this.handleTitleChange = this.handleTitleChange.bind(this);\r\n    this.addNewPage = this.addNewPage.bind(this);\r\n    this.handleDeletePage = this.handleDeletePage.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleRegister = this.handleRegister.bind(this);\r\n    this.onStudy = this.onStudy.bind(this);\r\n  }\r\n\r\n  addMenu () {\r\n    // this.setState({ menus: [...this.state.menus, {id:12, name: 'New collection'}] })\r\n    let user = JSON.parse(localStorage.getItem('user'));\r\n    Roggl.saveBoard({ name: 'New board', owner_id: user.user_id }).then(returnedId => {\r\n      // set state\r\n      const newState = {\r\n        ...this.state,\r\n        menus: [\r\n          ...this.state.menus,\r\n          { _id: returnedId, name: 'New board' }\r\n        ],\r\n      };\r\n      this.setState(newState);\r\n    })\r\n  }\r\n\r\n  componentDidMount () {\r\n    console.log('first time componentDidMount');\r\n    if (localStorage.getItem('user')) {\r\n      this.getBoards()\r\n    }\r\n  }\r\n\r\n  getBoards () {\r\n    const user_id = JSON.parse(localStorage.getItem('user')).user_id;\r\n    console.log('get boards for user_id: ' + user_id);\r\n\r\n    Roggl.getBoards(user_id).then(menus => {\r\n      if (menus.length) {\r\n        this.setState({ menus: menus, active_item: menus[0], page: 'home' });\r\n        // Handle Get Columns\r\n        this.handleGetColumns(menus[0]._id)\r\n      }\r\n    });\r\n  }\r\n\r\n  removeMenu () {\r\n    console.log('remove menu called');\r\n    // get current menu items\r\n    let menus = this.state.menus;\r\n    menus = menus.filter(currentMenu => currentMenu._id !== this.state.active_item._id);\r\n    this.setState({ menus: menus });\r\n    // no operation if there is no menu item\r\n    if (menus[0]) {\r\n      const firstMenu = menus[0]\r\n      this.setState({ active_item: firstMenu })\r\n    }\r\n    // db operation\r\n    Roggl.delete(this.state.active_item._id)\r\n  }\r\n\r\n  handleMenuClick (e) {\r\n    // returns _id such as #342 to 342\r\n    console.log('handleMenuClick called');\r\n    console.log(e.target.hash)\r\n    if (!e.target.hash) return\r\n    let _id = e.target.hash.replace('#', '');\r\n\r\n    const name = e.target.text\r\n    console.log(name)\r\n    console.log(e.target);\r\n    const newState = {\r\n      ...this.state,\r\n      active_item: { _id: _id, name: name },\r\n    };\r\n    this.setState(newState);\r\n\r\n    // active menu item stuff\r\n    this.setState({ active: _id });\r\n\r\n    // get board content from DB\r\n    console.log('|->called getColumns');\r\n    console.log('|--> id: ' + _id);\r\n\r\n    // Handle Get Columns\r\n    this.handleGetColumns(_id)\r\n  }\r\n\r\n  handleGetColumns (_id) {\r\n    Roggl.getColumns(_id).then(response => {\r\n      console.log(response);\r\n      this.setState({ columns: response })\r\n    })\r\n  }\r\n\r\n  handleChange (event) {\r\n    const _id = this.state.active_item._id\r\n    let name = event.target.value\r\n    console.log(\"new name\" + name)\r\n    if (name === '') {\r\n      name = \"- \"\r\n    }\r\n    // Fetch update request\r\n    Roggl.update({ _id, name })\r\n\r\n    // State tasks\r\n    let menus = this.state.menus\r\n\r\n    // const found = menus.find(element => element.id === _id) // returns elements all data\r\n    const found = menus.findIndex(element => element._id === _id)\r\n    console.log('found: ' + found)\r\n\r\n    if (found >= 0) {\r\n      // Update menu\r\n      menus[found].name = name\r\n      // this.setState({ menus: menus });\r\n      // Update active item name\r\n      let active_item = this.state.active_item\r\n      active_item.name = name\r\n      this.setState({ active_item: active_item, menus: menus })\r\n    }\r\n  }\r\n\r\n  handleTitleChange (e) {\r\n    const id = e.target.id\r\n    let columns = this.state.columns // copy\r\n    const found = columns.findIndex(element => element._id === id) //find\r\n    if (columns) {\r\n      columns[found].content = e.currentTarget.textContent //change or .textContent\r\n    } else {\r\n      console.log('error has been prevented');\r\n      return\r\n    }\r\n    this.setState({\r\n      columns: columns\r\n    })\r\n    // debug\r\n    console.log(id, e.currentTarget.textContent);\r\n    // Send api post request to update column content\r\n    Roggl.columnUpdateTitle({ _id: id, title: e.currentTarget.textContent })\r\n  }\r\n\r\n  handleContentChange (e) {\r\n    const id = e.target.id\r\n    let columns = this.state.columns // copy\r\n    const found = columns.findIndex(element => element._id === id) //find\r\n    columns[found].content = e.currentTarget.innerHTML //change or .textContent\r\n\r\n    this.setState({\r\n      columns: columns\r\n    })\r\n\r\n    // debug\r\n    console.log(id, e.currentTarget.innerHTML);\r\n\r\n    // Send api post request to update column content\r\n    Roggl.columnUpdate({ _id: id, content: e.currentTarget.innerHTML })\r\n\r\n  }\r\n\r\n  addNewPage (e) {\r\n    // copy columns state\r\n    let columns = this.state.columns\r\n\r\n    // database operations\r\n    let user = JSON.parse(localStorage.getItem('user'));\r\n    const owner_id = user.user_id // delete after authorization feature\r\n    const board_id = this.state.active_item._id\r\n    let title = \"\"\r\n    let content = \"\"\r\n    Roggl.addNewPage({ owner_id: owner_id, board_id: board_id, title: title, content: content }).then(returnedId => {\r\n      columns.push({ _id: returnedId, board_id: board_id, title: '', content: '' })\r\n      this.setState({\r\n        columns: columns\r\n      })\r\n    })\r\n\r\n  }\r\n\r\n  handleDeletePage (e) {\r\n    console.log('|-> delete page')\r\n    const myKey = e.currentTarget.getAttribute('my-key')\r\n    // get current menu items\r\n    let columns = this.state.columns;\r\n    columns = columns.filter(column => column._id !== myKey);\r\n    this.setState({ columns: columns });\r\n    Roggl.pageDelete(myKey)\r\n  }\r\n\r\n  pageSession () {\r\n    return <Session handleSubmit={this.handleSubmit} handleRegister={this.handleRegister} page={this.state.page} message={this.state.message} />\r\n  }\r\n  pageHome () {\r\n    return (\r\n      <div className=\"main\">\r\n        <SideNav\r\n          onAddMenu={this.addMenu}\r\n          onRemoveMenu={this.removeMenu}\r\n          onHandleMenuClick={this.handleMenuClick}\r\n          onHandleChange={this.handleChange}\r\n          onStudy={this.onStudy}\r\n          menus={this.state.menus}\r\n          active_item={this.state.active_item}\r\n        ></SideNav>\r\n        {this.state.columns.length === 0\r\n          ? <ColumnListNone onAddNewPage={this.addNewPage} />\r\n          : <ColumnList columns={this.state.columns} onHandleContentChange={this.handleContentChange} onHandleTitleChange={this.handleTitleChange} onAddNewPage={this.addNewPage} onHandleDeletePage={this.handleDeletePage}>></ColumnList>}\r\n      </div>\r\n    )\r\n  }\r\n\r\n  handleSubmit (e) {\r\n    console.log('checkLogin');\r\n    e.preventDefault()\r\n    const { email, password } = e.target.elements\r\n    if (typeof email.value !== 'string' || typeof password.value !== 'string' || email.value === '' || password.value === '') {\r\n      return false\r\n    }\r\n    console.log({ email: email.value, password: password.value })\r\n\r\n    if (this.state.page === 'login') {\r\n      Roggl.lookCredentials({ email: email.value, password: password.value }).then(response => {\r\n        console.log(response);\r\n        if (response.ok === 0) {\r\n          console.log('Geçersiz giriş bilgisi');\r\n          this.setState({ message: 'Incorrect e-mail address or password.' });\r\n        } else {\r\n          // change local storage and state\r\n          localStorage.setItem('user', JSON.stringify({ 'isLogin': true, 'user_id': response }));\r\n          this.setState({ page: 'home' });\r\n\r\n          // Load boards and pages\r\n          this.getBoards()\r\n        }\r\n      })\r\n    }\r\n\r\n    if (this.state.page === 'register') {\r\n      console.log('lets register');\r\n      Roggl.userRegister({ email: email.value, password: password.value }).then(response => {\r\n        console.log(response);\r\n        if (response.ok === 0) {\r\n          console.log('This e-mail address is not available.');\r\n          this.setState({ message: 'This e-mail address is not available.' });\r\n        } else {\r\n          // change local storage and state\r\n          console.log('response user_id' + response);\r\n          localStorage.setItem('user', JSON.stringify({ 'isLogin': true, 'user_id': response }));\r\n          this.setState({ page: 'home' });\r\n\r\n          // Create first page\r\n          this.addMenu()\r\n\r\n        }\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n  handleRegister () {\r\n    console.log('handle register');\r\n    let page = this.state.page\r\n    if (page === 'login') {\r\n      this.setState({ page: 'register', message: '' });\r\n    } else {\r\n      this.setState({ page: 'login', message: '' });\r\n    }\r\n  }\r\n\r\n  onStudy () {\r\n    console.log('on study state');\r\n    this.setState({ page: 'study' })\r\n  }\r\n\r\n  pageStudy () {\r\n    console.log('page study');\r\n\r\n    return <h1>Hello</h1>\r\n  }\r\n\r\n  render () {\r\n    console.log('router called');\r\n    let user = JSON.parse(localStorage.getItem('user'));\r\n    if (user) {\r\n      var isLogin = user.isLogin\r\n    } else {\r\n      var isLogin = false\r\n    }\r\n\r\n    let component\r\n    let page = this.state.page\r\n    if (page === 'home') {\r\n      component = this.pageHome()\r\n    } else if (page === 'study') {\r\n      component = this.pageStudy()\r\n    } else {\r\n      component = this.pageSession()\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        {component}\r\n      </div>\r\n    );\r\n  }\r\n}","D:\\Projects\\roggl\\repo\\src\\Components\\SideNav\\SideNav.js",[],"D:\\Projects\\roggl\\repo\\src\\Components\\MenuList\\MenuList.js",[],"D:\\Projects\\roggl\\repo\\src\\Components\\ColumnList\\ColumnList.js",[],"D:\\Projects\\roggl\\repo\\src\\Components\\Column\\Column.js",[],"D:\\Projects\\roggl\\repo\\src\\Components\\Menu\\Menu.js",[],"D:\\Projects\\roggl\\repo\\src\\Components\\TopBar\\TopBar.js",[],"D:\\Projects\\roggl\\repo\\src\\util\\Roggl.js",[],"D:\\Projects\\roggl\\repo\\src\\Components\\ColumnListNone\\ColumnListNone.js",[],"D:\\Projects\\roggl\\repo\\src\\Components\\Session\\Session.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"65","severity":1,"message":"66","line":313,"column":11,"nodeType":"63","messageId":"67","endLine":313,"endColumn":18},{"ruleId":"61","severity":1,"message":"68","line":313,"column":11,"nodeType":"63","messageId":"64","endLine":313,"endColumn":18},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"no-unused-vars","'Children' is defined but never used.","Identifier","unusedVar","no-redeclare","'isLogin' is already defined.","redeclared","'isLogin' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]